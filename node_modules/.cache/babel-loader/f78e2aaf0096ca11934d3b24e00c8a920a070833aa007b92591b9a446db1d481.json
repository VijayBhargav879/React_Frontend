{"ast":null,"code":"var _jsxFileName = \"/Users/vijay/rasa-chatbot/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5005/webhooks/rest/webhook\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Auto-scroll to the bottom when messages update\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Initial greeting when component mounts\n  useEffect(() => {\n    const fetchGreeting = async () => {\n      setIsTyping(true);\n      try {\n        const res = await fetch(API_URL, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            sender: \"user\",\n            message: \"hello\"\n          })\n        });\n        const data = await res.json();\n        const botReplies = data.map(d => ({\n          sender: \"bot\",\n          text: d.text\n        }));\n        setMessages([{\n          sender: \"bot\",\n          text: \"Hi! I'm your Renewable Energy Awareness Assistant. Ask me anything about solar, wind, or energy conservation!\"\n        }, ...botReplies]);\n      } catch (err) {\n        setMessages([{\n          sender: \"bot\",\n          text: \"Error connecting to server.\"\n        }]);\n      } finally {\n        setIsTyping(false);\n      }\n    };\n    fetchGreeting();\n  }, []);\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: input\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    setIsTyping(true);\n    try {\n      const res = await fetch(API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sender: \"user\",\n          message: input\n        })\n      });\n      const data = await res.json();\n      const botReplies = data.map(d => ({\n        sender: \"bot\",\n        text: d.text\n      }));\n      setMessages([...newMessages, ...botReplies]);\n    } catch (err) {\n      setMessages([...newMessages, {\n        sender: \"bot\",\n        text: \"Error connecting to server.\"\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"\\uD83C\\uDF31 Renewable Energy Awareness Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-bubble ${msg.sender === \"user\" ? \"user\" : \"bot\"}`,\n        children: msg.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-bubble bot typing\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Ask me anything about renewable energy...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === \"Enter\" && sendMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"y+n9Ho6B23MRn5kcdfXSJfzUP4U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API_URL","App","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchGreeting","res","fetch","method","headers","body","JSON","stringify","sender","message","data","json","botReplies","map","d","text","err","sendMessage","trim","newMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","msg","i","ref","type","placeholder","value","onChange","e","target","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/Users/vijay/rasa-chatbot/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nconst API_URL = \"http://localhost:5005/webhooks/rest/webhook\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Auto-scroll to the bottom when messages update\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  // Initial greeting when component mounts\n  useEffect(() => {\n    const fetchGreeting = async () => {\n      setIsTyping(true);\n      try {\n        const res = await fetch(API_URL, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ sender: \"user\", message: \"hello\" }),\n        });\n        const data = await res.json();\n        const botReplies = data.map((d) => ({\n          sender: \"bot\",\n          text: d.text,\n        }));\n        setMessages([\n          {\n            sender: \"bot\",\n            text:\n              \"Hi! I'm your Renewable Energy Awareness Assistant. Ask me anything about solar, wind, or energy conservation!\",\n          },\n          ...botReplies,\n        ]);\n      } catch (err) {\n        setMessages([{ sender: \"bot\", text: \"Error connecting to server.\" }]);\n      } finally {\n        setIsTyping(false);\n      }\n    };\n\n    fetchGreeting();\n  }, []);\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const newMessages = [...messages, { sender: \"user\", text: input }];\n    setMessages(newMessages);\n    setInput(\"\");\n    setIsTyping(true);\n\n    try {\n      const res = await fetch(API_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ sender: \"user\", message: input }),\n      });\n      const data = await res.json();\n      const botReplies = data.map((d) => ({\n        sender: \"bot\",\n        text: d.text,\n      }));\n      setMessages([...newMessages, ...botReplies]);\n    } catch (err) {\n      setMessages([\n        ...newMessages,\n        { sender: \"bot\", text: \"Error connecting to server.\" },\n      ]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <h1 className=\"title\">ðŸŒ± Renewable Energy Awareness Chatbot</h1>\n      <div className=\"chat-window\">\n        {messages.map((msg, i) => (\n          <div\n            key={i}\n            className={`chat-bubble ${msg.sender === \"user\" ? \"user\" : \"bot\"}`}\n          >\n            {msg.text}\n          </div>\n        ))}\n        {isTyping && (\n          <div className=\"chat-bubble bot typing\">\n            <span className=\"dot\"></span>\n            <span className=\"dot\"></span>\n            <span className=\"dot\"></span>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"chat-input-area\">\n        <input\n          type=\"text\"\n          placeholder=\"Ask me anything about renewable energy...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n        />\n        <button onClick={sendMessage}>âž¤</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}