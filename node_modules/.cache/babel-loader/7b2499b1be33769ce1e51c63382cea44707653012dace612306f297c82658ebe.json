{"ast":null,"code":"import axios from \"axios\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.handleUserMessage = async message => {\n      try {\n        const response = await axios.post(\"http://host.docker.internal:5005/webhooks/rest/webhook\", {\n          sender: \"user\",\n          message: message\n        });\n        response.data.forEach(msg => {\n          if (msg.text) {\n            const botMessage = this.createChatBotMessage(msg.text);\n            this.setState(prev => ({\n              ...prev,\n              messages: [...prev.messages, botMessage]\n            }));\n          }\n        });\n      } catch (error) {\n        const errMessage = this.createChatBotMessage(\"Sorry, I couldn't reach the server.\");\n        this.setState(prev => ({\n          ...prev,\n          messages: [...prev.messages, errMessage]\n        }));\n      }\n    };\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["axios","createChatBotMessage","ActionProvider","constructor","setStateFunc","handleUserMessage","message","response","post","sender","data","forEach","msg","text","botMessage","setState","prev","messages","error","errMessage"],"sources":["/Users/vijay/rasa-chatbot/src/ActionProvider.js"],"sourcesContent":["import axios from \"axios\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n  handleUserMessage = async (message) => {\n    try {\n      const response = await axios.post(\"http://host.docker.internal:5005/webhooks/rest/webhook\", {\n\n        sender: \"user\",\n        message: message,\n      });\n\n      response.data.forEach((msg) => {\n        if (msg.text) {\n          const botMessage = this.createChatBotMessage(msg.text);\n          this.setState((prev) => ({\n            ...prev,\n            messages: [...prev.messages, botMessage],\n          }));\n        }\n      });\n    } catch (error) {\n      const errMessage = this.createChatBotMessage(\"Sorry, I couldn't reach the server.\");\n      this.setState((prev) => ({\n        ...prev,\n        messages: [...prev.messages, errMessage],\n      }));\n    }\n  };\n}\n\nexport default ActionProvider;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,QAAQ,mBAAmB;AAExD,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAACF,oBAAoB,EAAEG,YAAY,EAAE;IAAA,KAKhDC,iBAAiB,GAAG,MAAOC,OAAO,IAAK;MACrC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,wDAAwD,EAAE;UAE1FC,MAAM,EAAE,MAAM;UACdH,OAAO,EAAEA;QACX,CAAC,CAAC;QAEFC,QAAQ,CAACG,IAAI,CAACC,OAAO,CAAEC,GAAG,IAAK;UAC7B,IAAIA,GAAG,CAACC,IAAI,EAAE;YACZ,MAAMC,UAAU,GAAG,IAAI,CAACb,oBAAoB,CAACW,GAAG,CAACC,IAAI,CAAC;YACtD,IAAI,CAACE,QAAQ,CAAEC,IAAI,KAAM;cACvB,GAAGA,IAAI;cACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEH,UAAU;YACzC,CAAC,CAAC,CAAC;UACL;QACF,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;QACd,MAAMC,UAAU,GAAG,IAAI,CAAClB,oBAAoB,CAAC,qCAAqC,CAAC;QACnF,IAAI,CAACc,QAAQ,CAAEC,IAAI,KAAM;UACvB,GAAGA,IAAI;UACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEE,UAAU;QACzC,CAAC,CAAC,CAAC;MACL;IACF,CAAC;IA5BC,IAAI,CAAClB,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACc,QAAQ,GAAGX,YAAY;EAC9B;AA2BF;AAEA,eAAeF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}